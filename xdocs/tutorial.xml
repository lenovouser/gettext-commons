<?xml version="1.0"?>

<document>
  <properties>
    <title>Tutorial</title>
  </properties>
  <body>
    <section name="Overview">
	  <p>The Gettext Commons classes combine the power of the
	  Unix-style <a href="http://www.gnu.org/software/gettext/">GNU
	  gettext</a> tools with the widely used Java ResourceBundles. We
	  find that the usual Java i18n approach of using custom property
	  keys rather than the original text is cumbersome to use and
	  makes programs harder to read. All user visible text is replaced
	  by arbitrary keys complicating lookups of strings in the
	  source.</p>

	  <p>There are a few more advantages of using gettext:</p>

	  <ul>
		<li>Easy extraction of user visible strings</li>
		<li>Strings are marked as fuzzy when the original text changes
		  so translators can check if the translations still
		  matches</li>
		<li>Powerful plural handling</li>
		<li>Build process integration through Maven</li>
	  </ul>

      <p>This page gives an overview of the Gettext Commons and
      describes how to integrate the library into existing Java
      applications.</p>

	  
	  <p>Quick Links: <a
		  href="examples/I18nExample.java">I18nExample.java</a>, <a
		  href="/gettext-commons/apidocs/index.html">API
		  Documentation</a></p>
	</section>

    <section name="Table of Contents">
      <ol>
		<li><a href="#Requirements">Requirements</a></li>
		<li><a href="#Installation">Installation</a></li>
		<li><a href="#Internationalization">Internationalization</a></li>
		<li><a href="#Creating_Resource_Bundles">Creating Resource Bundles</a></li>
		<li><a href="#Loading_Resource_Bundles">Loading Resource Bundles</a></li>
		<li><a href="#Maven_Integration">Maven Integration</a></li>
      </ol>
	</section>

    <section name="Requirements">
	  <ul>
		<li>Java 1.3 (or higher)</li>
		<li>GNU gettext</li>
	  </ul>
	</section>

    <section name="Installation">
      <subsection name="Windows">
      </subsection>
      
      <subsection name="*nix">
	<p>Most Unix systems and Linux distributions ship with gettext
	  packages.</p>
      </subsection>
    </section>

    <section name="Internationalization">
      <p>The Gettext Commons provide the class <tt><a
	    href="http://xnap-commons.sourceforge.net/gettext-commons/apidocs/org/xnap/commons/i18n/I18n.html">I18n</a></tt>
	that has methods that need to be invoked each time a
	user visible string is used:</p>
      
      <source>
I18n i18n = I18nFactory.getI18n(getClass());

System.out.println(i18n.tr("This text will be translated"));
</source>

      <p>I18n also supports proper handling of plurals:</p>

      <source>
System.out.println(i18n("Copied file.", "Copied files.", 1));
// -> will print "Copied file."

System.out.println(i18n("Copied file.", "Copied files.", 4));
// -> will print "Copied files."
      </source>      

	  <p>In addition there is a convenience methods that use the Java API
		<tt>MessageFormat.format()</tt> for substitution:</p>

		<source>
System.out.println(i18n.tr("Folder: {0}", new File("/home/xnap-commons"));
</source>

		<p>And sometimes it is necessary to provide different
		translations of the same word as some words may have multiple
		meanings in the native language the program is written but
		not in other languages:</p>

		<source>
System.out.println(i18n.trc("chat (verb)", "chat"));
System.out.println(i18n.trc("chat (noun)", "chat"));</source>

      <p>The preferable way to create an I18n object is through the <a
	href="http://xnap-commons.sourceforge.net/gettext-commons/apidocs/org/xnap/commons/i18n/I18nFactory.html">I18nFactory</a>.
	The factory caches the I18n object internally using the the package
	name of the provided class object and registers it with
	I18nManager. Thus all classes of the same package can use the same
	I18n instance.</p>
      
      <source>
public class SampleClass
{
	private static I18n i18n = I18nFactory.getI18n(SampleClass.class);

	String localizedString;

	public SampleClass()
	{
	        localizedString = i18n.tr("Hello, World");
	}
}
      </source>

      <p><a
	href="http://xnap-commons.sourceforge.net/gettext-commons/apidocs/org/xnap/commons/i18n/I18nManager.html">I18nManager</a>
	lets you register independently created I18n objects and provides
	the facility to change the locale of all registered I18n objects thereby
	notifying possible LocaleChangeListeners:</p>

      <source>
public class LocaleChangeAwareClass implements LocaleChangeListener
{
	private static I18n i18n = I18nFactory.getI18n(LocaleChangeAwareClass.class);

	String localizedString;

	public LocaleChangeListener()
	{
	        localizedString = i18n.tr("Hello, World");
	        I18nManager.getInstance().addWeakLocaleChangeListener(this);
	}

	public void localeChanged(LocaleChangeEvent event)
	{
	        // update string
	        localizedString = i18n.tr("Hello, World");
	}
}
      </source>

    </section>
	<section name="Creating Resource Bundles">
	  <p>Once the source code has been internationalized, i.e. all
	  user visible strings are wrapped by a call to
	  <code>i18n.tr()</code>, xgettext can be used to extract these
	  strings for localization.</p>

	  <p>This 3 step process is illustrated in this figure:</p>
	  
	  <center><img src="gettext-structure.png" border="0"></img></center>
		
	  <ol>
		<li>
		  <b>xgettext</b> scans the source code for calls to
		  <tt>tr()</tt>, <tt>trc()</tt> and <tt>trn()</tt> and creates
		  a pot file that contains all strings in the native language.
		</li>
		<li>
		  <b>msgmerge</b> merges the strings into a po file that
		  contains translations for a single locale. This file can be
		  edited with convenient tools like <a
		  href="http://www.poedit.org/">poedit</a>, KBabel or Emacs.
		</li>
		<li>
		  <b>msgfmt</b> is used to generate Java class files that
		  extend the Java <tt>ResourceBundle</tt> class.
		</li>
	  </ol>

	  <p>Here is simple example of running the xgettext commands:</p>

	  <source>
# extract keys
xgettext -ktrc -ktr -kmarktr -ktrn:1,2 -o po/keys.pot src/*.java 

# merge keys into localized po file
msgmerge -U po/de.po po/keys.pot

# translate file
poedit po/de.po

# create German ResourceBundle class file in app.i18n package
msgfmt --java2 -d src/conf -r app.i18n.Messages -l de de.po
</source>

    </section>
	<section name="Loading Resource Bundles">
	  <p>In order...</p>
	  
	  <p>Example <b>i18n.properties</b> file:</p>
	  
	  <source>
basename=app.i18n.Messages
	  </source>
	</section>

	<section name="Maven Integration">
	  <p>If Maven is used for building the invocation of gettext can
	    be easily integrated into the build process. Follow the
	    appropriate link below for more information:</p>
	  
	  <ul>
	    <li><a
		href="http://xnap-commons.sourceforge.net/m1/maven-gettext-plugin/index.html">Maven	1.x Gettext Plugin</a></li>
	    <li><a
		href="http://xnap-commons.sourceforge.net/m2/maven-gettext-plugin/index.html">Maven
		2.x Gettext Plugin</a></li>
	  </ul>
	</section>
	
  </body>
</document>

<!--
Local Variables:
sgml-indent-data: t
End:
-->